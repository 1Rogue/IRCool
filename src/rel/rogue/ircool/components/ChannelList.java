/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rel.rogue.ircool.components;

/**
 *
 * @author Spencer
 */
public class ChannelList extends javax.swing.JPanel {
    
    private rel.rogue.ircool.parsers.ChannelParser chanParser;
    private java.util.HashMap<String, String> channels = new java.util.HashMap<>();
    private String activeChan = "#Rogue";
    private rel.rogue.ircool.MainGUI gui;
    
    public void link (rel.rogue.ircool.parsers.ChannelParser cp, rel.rogue.ircool.MainGUI mg) {
        chanParser = cp;
        gui = mg;
    }

    /**
     * Creates new form ChannelList
     */
    public ChannelList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        channelList = new javax.swing.JList();

        channelList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return channels.size(); }
            public Object getElementAt(int i) {
                Object temp = "@@console";
                return temp;
            }
        });
        channelList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        channelList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        channelList.setName(""); // NOI18N
        channelList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                channelListMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(channelList, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(channelList, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void channelListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_channelListMouseClicked
        this.switchChan();
    }//GEN-LAST:event_channelListMouseClicked

    public java.util.HashMap getChannels() {
        return channels;
    }
    
    public javax.swing.JList getChannelList() {
        return channelList;
    }
    
    public String getActiveChannel() {
        return activeChan;
    }
    
    public void addChan (org.pircbotx.Channel chan) {
        this.getChannels().put(chan.getName(), "");
        this.updateChannelList();
    }
    
    public void updateChannelList() {
        System.out.println("I've been called! -updateChannelList");
        this.getChannelList().setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return channels.size(); }
            public Object getElementAt(int i) {
                Object[] temp = channels.keySet().toArray();
                java.util.Arrays.sort(temp);
                return temp[i];
            }
        });
    }
    
    public void setChansDC () {
        String[] chans = chanParser.getChannelNames(this.getChannels());
        for (int i=0;i<this.getChannels().size(); i++) {
            this.getChannels().put("(" + chans[i] + ")", this.getChannels().remove(chans[i]));
        }
    }
    
    public void setChansRC () {
        String[] chans = chanParser.getChannelNames(channels);
        String newkey = "";
        for (int i=0;i<this.getChannels().size(); i++) {
            newkey = chans[i].substring(1);
            newkey = chans[i].split("\\)")[0];
            this.getChannels().put("(" + chans[i] + ")", this.getChannels().remove(chans[i]));
        }
    }
    public void setNewChan(String chan) {
        if (this.getChannels().containsKey(chan)) {
            switchChan();
        }
        else {
            getChannelList().setSelectedValue("@@console", true);
        }
    }
    
    public void switchChan() {
        if (!(this.getChannelList().getSelectedValue().toString().equals(this.getActiveChannel()))) {
            System.out.println(this.getChannels());
            System.out.println();
            System.out.println(this.getActiveChannel());
            System.out.println();
            System.out.println(gui.getTextArea().getText());
            this.getChannels().put(this.getActiveChannel(), gui.getTextArea().getText());
            activeChan = this.getChannelList().getSelectedValue().toString();
            gui.getTextArea().setText("");
            gui.getUserList().setListData(new Object[]{""});
            gui.getTextArea().append(channels.get(activeChan));
            gui.setUsers();
            gui.getTextArea().setCaretPosition(gui.getTextArea().getDocument().getLength());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JList channelList;
    // End of variables declaration//GEN-END:variables
}
